pipeline {
    agent any
    
    environment {
        DOCKER_HUB_CREDENTIALS = credentials('Docker_Cred')
        DOCKER_IMAGE = "rnagar88/abctechnologies:latest"
    }
    tools {
        // Specify the name of the Maven installation
        maven 'M3'
    }
    stages {
        stage('Checkout') {
            steps {
                // Checkout the code from the Git repository
                git branch: 'main', url: 'https://github.com/rajeshgithubrepo/pgp_project1.git'
            }
        }
        stage('Code Compile') {
            steps {
                // Package the .war file
                sh 'mvn compile'
            }
        }
               stage('Unit Test') {
            steps {
                // Package the .war file
                sh 'mvn test'
            }
        }
               stage('Code Package') {
            steps {
                // Package the .war file
                sh 'mvn package'
            }
        }
        stage('Build Docker Image') {
            steps {
                script {
                    // Build Docker image
                    sh 'docker build -t $DOCKER_IMAGE .'
                }
            }
        }
        stage('Push Docker Image to Docker Hub') {
            steps {
                script {
                    // Log in to Docker Hub
                    sh 'echo $DOCKER_HUB_CREDENTIALS_PSW | docker login -u $DOCKER_HUB_CREDENTIALS_USR --password-stdin'
                    
                    // Push Docker image to Docker Hub
                    sh 'docker push $DOCKER_IMAGE'
                }
            }
        }
        stage('Deploy Docker Container') {
            steps {
                script {
                    // Run Docker container
                    sh 'docker run -d --name tomcat -p 8082:8080 $DOCKER_IMAGE'
                }
            }
        }
        stage('Stop Runing test container') {
            steps {
                script {
                    // Run Docker container
                    sh 'sleep 30'
                    sh 'docker stop tomcat'
                    sh 'docker rm tomcat'
                }
            }
        }
    }
    post {
        always {
            // Clean up Docker images to save space
            sh 'docker image prune -f'
        }
    }
}
